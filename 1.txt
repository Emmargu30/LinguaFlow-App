import React, { useState, useEffect } from 'react';

// Main App component
function App() {
  // State variables for managing the application's flow and data
  const [language, setLanguage] = useState(null); // Stores the selected language (e.g., 'Spanish', 'French')
  const [lessonPhase, setLessonPhase] = useState('selection'); // Controls the current view: 'selection', 'loading', 'lesson', 'practice'
  const [lessonContent, setLessonContent] = useState(''); // Stores the lesson text generated by the AI
  const [userInput, setUserInput] = useState(''); // Stores the user's input for practice exercises
  const [feedback, setFeedback] = useState(''); // Stores feedback for the user's answer
  const [isLoading, setIsLoading] = useState(false); // Indicates if content is being loaded from the AI
  const [error, setError] = useState(''); // Stores any error messages

  // Function to call the Gemini API and generate lesson content
  const generateLessonContent = async (selectedLanguage, topic) => {
    setIsLoading(true); // Set loading state to true
    setError(''); // Clear previous errors
    setLessonContent(''); // Clear previous lesson content
    setFeedback(''); // Clear previous feedback

    // Construct the prompt for the Gemini model
    const prompt = `Genera una lección de ${topic} para principiantes en ${selectedLanguage}. Enfócate en conceptos clave y proporciona ejemplos claros. La lección debe ser concisa y fácil de entender.`;

    let chatHistory = [];
    chatHistory.push({ role: "user", parts: [{ text: prompt }] });

    const payload = { contents: chatHistory };
    const apiKey = ""; // API key will be provided by the Canvas environment
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        // Handle HTTP errors
        throw new Error(`Error HTTP: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();

      // Check if the response structure is as expected
      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const text = result.candidates[0].content.parts[0].text;
        setLessonContent(text); // Update lesson content with AI-generated text
        setLessonPhase('lesson'); // Transition to the lesson phase
      } else {
        setError('No se pudo generar el contenido de la lección. Inténtalo de nuevo.');
        console.error('Estructura de respuesta inesperada:', result);
      }
    } catch (err) {
      setError(`Error al conectar con la IA: ${err.message}. Asegúrate de tener conexión a internet.`);
      console.error('Error al generar contenido:', err);
    } finally {
      setIsLoading(false); // Set loading state to false
    }
  };

  // Handler for language selection
  const handleLanguageSelect = (lang) => {
    setLanguage(lang); // Set the chosen language
    generateLessonContent(lang, 'vocabulario'); // Start with a vocabulary lesson
  };

  // Handler for checking user's practice answer (simplified)
  const checkAnswer = () => {
    // In a real app, this would involve more complex logic,
    // potentially sending the answer to the LLM for evaluation or
    // comparing against expected answers from a structured lesson.
    if (userInput.trim().toLowerCase().includes('hola')) { // Simple example check
      setFeedback('¡Correcto! Buen trabajo.');
    } else {
      setFeedback('Incorrecto. Inténtalo de nuevo o revisa la lección.');
    }
  };

  // Render content based on the current lesson phase
  const renderContent = () => {
    switch (lessonPhase) {
      case 'selection':
        return (
          <div className="text-center">
            <h2 className="text-3xl font-bold mb-6 text-gray-800">Elige un idioma para empezar</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {['Español', 'Francés', 'Alemán', 'Italiano', 'Japonés', 'Chino'].map((lang) => (
                <button
                  key={lang}
                  onClick={() => handleLanguageSelect(lang)}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-4 px-6 rounded-xl shadow-lg transform transition duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300"
                >
                  {lang}
                </button>
              ))}
            </div>
          </div>
        );
      case 'loading':
        return (
          <div className="text-center">
            <h2 className="text-2xl font-semibold text-gray-700">Cargando lección de {language}...</h2>
            <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto mt-8"></div>
          </div>
        );
      case 'lesson':
        return (
          <div className="flex flex-col items-center w-full">
            <h2 className="text-3xl font-bold mb-4 text-gray-800">Lección de {language}</h2>
            {error && <p className="text-red-500 mb-4">{error}</p>}
            {isLoading ? (
              <div className="text-center">
                <h2 className="text-2xl font-semibold text-gray-700">Generando contenido...</h2>
                <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto mt-8"></div>
              </div>
            ) : (
              <div className="bg-white p-6 rounded-xl shadow-lg w-full max-w-2xl text-gray-700 leading-relaxed text-lg overflow-y-auto max-h-[60vh]">
                <p className="whitespace-pre-wrap">{lessonContent}</p>
              </div>
            )}
            <div className="mt-8 flex flex-col sm:flex-row gap-4 w-full justify-center">
              <button
                onClick={() => generateLessonContent(language, 'gramática')}
                className="bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-xl shadow-md transform transition duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-green-300"
              >
                Siguiente: Gramática
              </button>
              <button
                onClick={() => setLessonPhase('practice')}
                className="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-3 px-6 rounded-xl shadow-md transform transition duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-purple-300"
              >
                Practicar
              </button>
              <button
                onClick={() => setLessonPhase('selection')}
                className="bg-gray-400 hover:bg-gray-500 text-white font-semibold py-3 px-6 rounded-xl shadow-md transform transition duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300"
              >
                Cambiar idioma
              </button>
            </div>
          </div>
        );
      case 'practice':
        return (
          <div className="flex flex-col items-center w-full">
            <h2 className="text-3xl font-bold mb-4 text-gray-800">Practica tu {language}</h2>
            <p className="text-lg text-gray-700 mb-6">Escribe una palabra o frase simple en {language} (ej. "Hola"):</p>
            <input
              type="text"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              className="w-full max-w-md p-4 border-2 border-gray-300 rounded-xl text-lg focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
              placeholder="Escribe tu respuesta aquí..."
            />
            <button
              onClick={checkAnswer}
              className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-8 rounded-xl shadow-md transform transition duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300"
            >
              Comprobar
            </button>
            {feedback && (
              <p className={`mt-4 text-xl font-semibold ${feedback.includes('Correcto') ? 'text-green-600' : 'text-red-600'}`}>
                {feedback}
              </p>
            )}
            <button
              onClick={() => setLessonPhase('lesson')}
              className="mt-8 bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 px-6 rounded-xl shadow-md transform transition duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-yellow-300"
            >
              Volver a la lección
            </button>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center p-4 font-sans">
      <div className="bg-white p-8 rounded-3xl shadow-2xl max-w-4xl w-full flex flex-col items-center border border-gray-200">
        <h1 className="text-5xl font-extrabold mb-10 text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
          LinguaFlow
        </h1>
        {renderContent()}
      </div>
    </div>
  );
}

export default App;

